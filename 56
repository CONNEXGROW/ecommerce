<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Premium E-Books Store</title>
  <style>
    :root {
      --primary-color: #1DB954;
      --secondary-color: #191414;
      --text-color: #FFFFFF;
      --background-color: #121212;
      --card-background: #282828;
      --hover-color: #1ED760;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Circular', Arial, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      line-height: 1.6;
    }

    .navbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: var(--secondary-color);
      padding: 1rem 2rem;
      position: sticky;
      top: 0;
      z-index: 1000;
    }

    .logo {
      font-size: 1.5rem;
      font-weight: bold;
      color: var(--primary-color);
      text-decoration: none;
    }

    .nav-right a {
      color: var(--text-color);
      text-decoration: none;
      margin-left: 1rem;
      transition: color 0.3s ease;
    }

    .nav-right a:hover {
      color: var(--primary-color);
    }

    .tab-buttons {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin: 2rem 0;
    }

    .tab-buttons button {
      padding: 0.75rem 1.5rem;
      border: none;
      background-color: var(--card-background);
      color: var(--text-color);
      cursor: pointer;
      border-radius: 2rem;
      font-size: 1rem;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .tab-buttons button:hover {
      background-color: var(--primary-color);
      transform: scale(1.05);
    }

    .tab-buttons button.active {
      background-color: var(--primary-color);
    }

    .tab-content {
      display: none;
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }

    .tab-content.active {
      display: block;
    }

    .product-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 2rem;
    }

    .product {
      background-color: var(--card-background);
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .product:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

    .product img {
      width: 100%;
      height: 200px;
      object-fit: cover;
    }

    .product-info {
      padding: 1rem;
    }

    .product h3 {
      margin-bottom: 0.5rem;
    }

    .product p {
      margin-bottom: 1rem;
      color: #B3B3B3;
    }

    .product button {
      width: 100%;
      padding: 0.75rem;
      background-color: var(--primary-color);
      color: var(--text-color);
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .product button:hover {
      background-color: var(--hover-color);
    }

    .cart-item {
      background-color: var(--card-background);
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .cart-item-info {
      flex-grow: 1;
    }

    .cart-item-actions {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .cart-item-actions button {
      background-color: var(--primary-color);
      color: var(--text-color);
      border: none;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      font-size: 1.2rem;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .cart-item-actions button:hover {
      background-color: var(--hover-color);
    }

    .remove-btn {
      background-color: #E91429 !important;
    }

    .remove-btn:hover {
      background-color: #FF1E32 !important;
    }

    .checkout-btn {
      display: block;
      width: 100%;
      padding: 1rem;
      background-color: var(--primary-color);
      color: var(--text-color);
      border: none;
      border-radius: 4px;
      font-size: 1.1rem;
      cursor: pointer;
      transition: background-color 0.3s ease;
      margin-top: 2rem;
    }

    .checkout-btn:hover {
      background-color: var(--hover-color);
    }

    #delivery input {
      width: 100%;
      padding: 0.75rem;
      margin-bottom: 1rem;
      border: none;
      border-radius: 4px;
      background-color: var(--card-background);
      color: var(--text-color);
    }

    #delivery input::placeholder {
      color: #B3B3B3;
    }

    .profile-info {
      background-color: var(--card-background);
      border-radius: 8px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .profile-info h2 {
      margin-bottom: 1rem;
    }

    .profile-info p {
      margin-bottom: 0.5rem;
      color: #B3B3B3;
    }

    .orders-list {
      margin-top: 2rem;
    }

    .order-item {
      background-color: var(--card-background);
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
    }

    .order-item h3 {
      margin-bottom: 0.5rem;
    }

    .order-item p {
      margin-bottom: 0.5rem;
      color: #B3B3B3;
    }

    @media (max-width: 768px) {
      .product-grid {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      }
    }
  </style>
</head>
<body>
  <nav class="navbar">
    <a href="#" class="logo">Premium E-Books</a>
    <div class="nav-right">
      <a href="#" onclick="switchTab('cart')">Cart (<span id="cartCount">0</span>)</a>
      <button id="loginButton">Login with Google</button>
    </div>
  </nav>

  <div class="tab-buttons">
    <button onclick="switchTab('home')" class="active">Home</button>
    <button onclick="switchTab('cart')">Cart</button>
    <button onclick="switchTab('delivery')">Delivery</button>
    <button id="profileButton" onclick="switchTab('profile')">Profile</button>
  </div>

  <div id="home" class="tab-content active">
    <h1>Featured E-Books</h1>
    <div id="products-container" class="product-grid"></div>
  </div>

  <div id="cart" class="tab-content">
    <h1>Your Cart</h1>
    <div id="cart-container"></div>
  </div>

  <div id="delivery" class="tab-content">
    <h1>Delivery Information</h1>
    <input type="text" id="name" placeholder="Full Name" required>
    <input type="email" id="email" placeholder="Email Address" required>
    <input type="tel" id="phone" placeholder="Phone Number" required>
    <input type="text" id="address" placeholder="Delivery Address" required>
    <button onclick="checkout()" class="checkout-btn">Confirm Order</button>
  </div>

  <div id="profile" class="tab-content">
    <div class="profile-info">
      <h2>User Profile</h2>
      <p id="userName">Name: </p>
      <p id="userEmail">Email: </p>
    </div>
    <div class="orders-list">
      <h2>Your Orders</h2>
      <div id="orders-container"></div>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-app.js";
    import { getAuth, GoogleAuthProvider, signInWithPopup, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-auth.js";
    import { getFirestore, collection, query, where, getDocs, doc, setDoc, getDoc } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-firestore.js";

    // Your Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyAwLSq4--UeQsqUJeG-hKmbkSnBEiejtuk",
      authDomain: "commerce-54fd5.firebaseapp.com",
      projectId: "commerce-54fd5",
      storageBucket: "commerce-54fd5.firebasestorage.app",
      messagingSenderId: "784295502117",
      appId: "1:784295502117:web:9f3006ad6c57a0fb3c7acc"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const provider = new GoogleAuthProvider();
    const db = getFirestore(app);

    document.getElementById('loginButton').addEventListener('click', () => {
      signInWithGoogle();
    });

    async function signInWithGoogle() {
      try {
        const result = await signInWithPopup(auth, provider);
        const user = result.user;
        console.log("User signed in:", user);
        alert("Login successful!");
        displayUserProfile(user);
        fetchUserOrders(user.uid);
        fetchUserCart(user.uid);
        document.getElementById('profileButton').disabled = false;
      } catch (error) {
        console.error("Error signing in with Google:", error.message);
        alert("Failed to sign in. Please try again.");
      }
    }

    function displayUserProfile(user) {
      document.getElementById('userName').textContent = `Name: ${user.displayName}`;
      document.getElementById('userEmail').textContent = `Email: ${user.email}`;
    }

    async function fetchUserOrders(userId) {
      try {
        const ordersRef = collection(db, 'orders');
        const q = query(ordersRef, where('userId', '==', userId));
        const querySnapshot = await getDocs(q);

        const ordersContainer = document.getElementById('orders-container');
        ordersContainer.innerHTML = "";

        querySnapshot.forEach((doc) => {
          const orderData = doc.data();
          const orderDiv = document.createElement('div');
          orderDiv.className = 'order-item';
          orderDiv.innerHTML = `
            <h3>Order ID: ${doc.id}</h3>
            <p>Total Amount: â‚¹${orderData.totalAmount.toLocaleString()}</p>
            <p>Delivery Address: ${orderData.deliveryInfo.address}</p>
            <p>Products: ${orderData.products.map(product => product.name).join(', ')}</p>
          `;
          ordersContainer.appendChild(orderDiv);
        });

        if (querySnapshot.empty) {
          ordersContainer.innerHTML = "<p>No orders available.</p>";
        }
      } catch (error) {
        console.error("Error fetching user orders:", error.message);
      }
    }

    async function fetchUserCart(userId) {
      try {
        const cartRef = doc(db, 'carts', userId);
        const cartSnapshot = await getDoc(cartRef);

        if (cartSnapshot.exists()) {
          const cartData = cartSnapshot.data();
          cart = cartData.products;
          updateCartUI();
          displayCartItems();
        } else {
          cart = [];
          updateCartUI();
          displayCartItems();
        }
      } catch (error) {
        console.error("Error fetching user cart:", error.message);
      }
    }

    async function saveUserCart(userId) {
      try {
        const cartRef = doc(db, 'carts', userId);
        await setDoc(cartRef, { products: cart });
      } catch (error) {
        console.error("Error saving user cart:", error.message);
      }
    }

    onAuthStateChanged(auth, (user) => {
      if (user) {
        displayUserProfile(user);
        fetchUserOrders(user.uid);
        fetchUserCart(user.uid);
        document.getElementById('profileButton').disabled = false;
      } else {
        document.getElementById('userName').textContent = 'Name: ';
        document.getElementById('userEmail').textContent = 'Email: ';
        document.getElementById('orders-container').innerHTML = "<p>Please log in to view your orders.</p>";
        cart = [];
        updateCartUI();
        displayCartItems();
        document.getElementById('profileButton').disabled = true;
      }
    });

    let cart = [];
    let allProducts = [];

    window.switchTab = function(tab) {
      document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
      document.getElementById(tab).classList.add('active');
      document.querySelectorAll('.tab-buttons button').forEach(button => button.classList.remove('active'));
      document.querySelector(`.tab-buttons button[onclick="switchTab('${tab}')"]`).classList.add('active');
      if (tab === 'home') fetchProducts();
      if (tab === 'cart') displayCartItems();
      if (tab === 'profile') {
        const user = auth.currentUser;
        if (user) {
          displayUserProfile(user);
          fetchUserOrders(user.uid);
          fetchUserCart(user.uid);
        }
      }
    }

    async function fetchProducts() {
      try {
        const response = await fetch("https://ecommerce-mq4y.onrender.com/products");
        const data = await response.json();
        if (data.success) {
          allProducts = data.products;
          displayProducts(allProducts);
        } else {
          console.error("Error fetching products:", data.error);
        }
      } catch (error) {
        console.error("Error fetching products:", error.message);
      }
    }

    function displayProducts(products) {
      const productsContainer = document.getElementById("products-container");
      productsContainer.innerHTML = "";
      if (products.length === 0) {
        productsContainer.innerHTML = "<p>No products available.</p>";
        return;
      }
      products.forEach(product => {
        const productDiv = document.createElement("div");
        productDiv.className = "product";
        productDiv.innerHTML = `
          <img src="${product.imageUrl}" alt="${product.name}">
          <div class="product-info">
            <h3>${product.name}</h3>
            <p>${product.description}</p>
            <p>Price: â‚¹${product.price.toLocaleString()}</p>
            <button onclick="addToCart('${product.id}', '${product.name}', ${product.price})">Add to Cart</button>
          </div>
        `;
        productsContainer.appendChild(productDiv);
      });
    }

    window.addToCart = function(productId, name, price) {
      const existingItem = cart.find(item => item.productId === productId);
      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        cart.push({ productId, name, price, quantity: 1 });
      }
      const user = auth.currentUser;
      if (user) {
        saveUserCart(user.uid);
      }
      updateCartUI();
    }

    function removeFromCart(productId) {
      cart = cart.filter(item => item.productId !== productId);
      const user = auth.currentUser;
      if (user) {
        saveUserCart(user.uid);
      }
      updateCartUI();
      displayCartItems();
    }

    function updateQuantity(productId, change) {
      const item = cart.find(item => item.productId === productId);
      if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
          removeFromCart(productId);
        } else {
          const user = auth.currentUser;
          if (user) {
            saveUserCart(user.uid);
          }
          updateCartUI();
          displayCartItems();
        }
      }
    }

    function displayCartItems() {
      const cartContainer = document.getElementById("cart-container");
      cartContainer.innerHTML = "";
      if (cart.length === 0) {
        cartContainer.innerHTML = "<p>Your cart is empty.</p>";
        return;
      }
      cart.forEach(item => {
        const cartItemDiv = document.createElement("div");
        cartItemDiv.className = "cart-item";
        cartItemDiv.innerHTML = `
          <div class="cart-item-info">
            <h3>${item.name}</h3>
            <p>Price: â‚¹${item.price.toLocaleString()}</p>
            <p>Total: â‚¹${(item.price * item.quantity).toLocaleString()}</p>
          </div>
          <div class="cart-item-actions">
            <button onclick="updateQuantity('${item.productId}', -1)">-</button>
            <span>${item.quantity}</span>
            <button onclick="updateQuantity('${item.productId}', 1)">+</button>
            <button onclick="removeFromCart('${item.productId}')" class="remove-btn">Ã—</button>
          </div>
        `;
        cartContainer.appendChild(cartItemDiv);
      });
      const checkoutButton = document.createElement("button");
      checkoutButton.className = "checkout-btn";
      checkoutButton.textContent = "Proceed to Checkout";
      checkoutButton.onclick = () => switchTab('delivery');
      cartContainer.appendChild(checkoutButton);
    }

    function updateCartUI() {
      const cartCount = document.getElementById("cartCount");
      const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
      cartCount.textContent = totalItems;
    }

    async function checkout() {
      const user = auth.currentUser;
      if (!user) {
        alert("Please log in to proceed with the checkout.");
        return;
      }

      const name = document.getElementById("name").value;
      const email = document.getElementById("email").value;
      const phone = document.getElementById("phone").value;
      const address = document.getElementById("address").value;

      if (!name || !email || !phone || !address) {
        alert("Please fill out all fields.");
        return;
      }

      const totalAmount = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

      if (totalAmount <= 0) {
        alert("Your cart is empty. Please add products to proceed.");
        return;
      }

      try {
        const response = await fetch("https://ecommerce-mq4y.onrender.com/create-order", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ amount: totalAmount }),
        });

        const data = await response.json();
        if (!data.success) {
          alert(`Error creating order: ${data.error}`);
          return;
        }

        const options = {
          key: "YOUR_RAZORPAY_KEY_ID", // Replace with your actual Razorpay Key ID
          amount: data.order.amount,
          currency: "INR",
          name: "Premium E-Books Store",
          description: "Payment for your order",
          order_id: data.order.id,
          prefill: {
            name,
            email,
            contact: phone,
          },
          handler: async function (response) {
            try {
              console.log("Payment successful, saving order:", response);
              await fetch("https://ecommerce-mq4y.onrender.com/save-order", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  userId: user.uid,
                  products: cart,
                  totalAmount,
                  paymentId: response.razorpay_payment_id,
                  deliveryInfo: { name, email, phone, address },
                }),
              });
              alert("Payment successful! Your order has been placed.");
              cart = [];
              saveUserCart(user.uid);
              updateCartUI();
              switchTab('home');
            } catch (error) {
              console.error("Error saving order:", error.message);
              alert("Failed to save order. Please try again.");
            }
          },
        };

        const rzp = new Razorpay(options);
        rzp.open();
      } catch (error) {
        console.error("Error during checkout:", error.message);
        alert("Checkout failed. Please try again.");
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      updateCartUI();
      fetchProducts();
      document.getElementById('profileButton').disabled = true;
    });

    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    document.body.appendChild(script);
  </script>
</body>
</html>
